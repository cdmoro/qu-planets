{"version":3,"sources":["utils/stringToColor.ts","components/PlanetCard.tsx","App.tsx","hooks/useLocalStorage.ts","hooks/useFetch.ts","reportWebVitals.ts","index.tsx"],"names":["stringToColor","str","hash","i","length","charCodeAt","color","toString","substr","PlanetCard","planetName","planet","href","url","target","className","rel","style","backgroundImage","backgroundSize","backgroundPosition","name","backgroundColor","App","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","_value","_setValue","value","setItem","stringify","useLocalStorage","setUrl","callback","data","setData","setError","loading","setLoading","fetchData","a","fetch","r","json","useEffect","useFetch","onClick","previous","disabled","next","results","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c8bc5c3.chunk.js","sourcesContent":["const stringToColor = (str: string) => {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    \n    let color = '#';\n    \n    for (let i = 0; i < 3; i++) {\n        const value = (hash >> (i * 8)) & 0xFF;\n        color += ('00' + value.toString(16)).substr(-2);\n    }\n    \n    return color;\n}\n\nexport {\n    stringToColor\n}","import React, { CSSProperties, FC } from \"react\"\nimport { IPlanet } from \"../definitions/IPlanet\"\nimport { stringToColor } from \"../utils/stringToColor\"\n\ninterface PlanetProps {\n  planet: IPlanet\n}\n\nconst PlanetCard: FC<PlanetProps> = ({ planet }) => {\n  const resolveStyle = (planetName: string): CSSProperties => {\n    return {\n      backgroundColor: stringToColor(planetName),\n    }\n  }\n\n  return (\n    <a\n      href={planet.url}\n      target=\"_blank\"\n      className=\"block m-5 bg-white rounded-md shadow-md card group\"\n      rel=\"noreferrer\"\n    >\n      <div className=\"relative flex justify-center p-6 overflow-hidden text-center bg-gradient-to-t from-blue-900 to-black h-36 rounded-t-md\">\n        <div\n          className=\"absolute inset-0 starts\"\n          style={{\n            backgroundImage:\n              \"radial-gradient(white, rgba(255,255,255,.2) 2px, transparent 40px), radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 30px), radial-gradient(white, rgba(255,255,255,.1) 2px, transparent 40px), radial-gradient(rgba(255,255,255,.4), rgba(255,255,255,.1) 2px, transparent 30px)\",\n            backgroundSize:\n              \"550px 550px, 350px 350px, 250px 250px, 150px 150px\",\n            backgroundPosition: \"0 0, 40px 60px, 130px 270px, 70px 100px\",\n          }}\n        />\n        <div\n          className=\"relative w-16 h-16 transition-all duration-200 rounded-full p-28 card-planet group-hover:p-8\"\n          style={resolveStyle(planet.name)}\n        />\n      </div>\n      <div className=\"p-4 card-body\">\n        <h3 className=\"font-bold uppercase\">{planet.name}</h3>\n      </div>\n    </a>\n  )\n}\n\nexport default PlanetCard\n","import React, { FC } from \"react\"\nimport { IPlanet } from \"./definitions/IPlanet\"\nimport PlanetCard from \"./components/PlanetCard\"\nimport { useFetch } from \"./hooks/useFetch\"\nimport { IResponse } from \"./definitions/IResponse\"\nimport { useLocalStorage } from \"./hooks/useLocalStorage\"\n\nconst App: FC = () => {\n  const [url, setUrl] = useLocalStorage(\"url\", \"https://swapi.dev/api/planets?page=1&format=json\")\n  const [data, loading] = useFetch<IResponse<IPlanet>>(url);\n\n  return (\n    <div className=\"min-h-screen bg-gray-600 App\">\n      <div className=\"container mx-auto\">\n        <div className=\"flex justify-center space-x-3\">\n          <button\n            onClick={() => setUrl(data.previous as string)}\n            disabled={loading || data?.previous === null}\n          >\n            Previous page\n          </button>\n          <div>Page: {url.substr(-1)}</div>\n          <button\n            onClick={() => setUrl(data.next as string)}\n            disabled={loading || data?.next === null}\n          >\n            Next page\n          </button>\n        </div>\n        { loading\n          ? \"Loading\"\n          : <div className=\"flex flex-wrap justify-center planets-container\">\n              { data?.results.map((planet: IPlanet) => (\n                <div className=\"w-full sm:w-2/4 md:w-3/12 planet-card-wrapper\" key={planet.name} >\n                  <PlanetCard planet={planet} />\n                </div>\n              ))}\n            </div>\n        }\n      </div>\n      {/* <table>\n        <tbody>\n          {\n            planets.map((planet: IPlanet) => (\n              <tr>\n                <td>{ planet.name }</td>\n                <td>{ planet.climate }</td>\n                <td>{ planet.diameter }</td>\n                <td>{ planet.films }</td>\n                <td>{ planet.gravity }</td>\n                <td>{ planet.orbital_period }</td>\n                <td>{ planet.population }</td>\n                <td>{ planet.residents }</td>\n                <td>{ planet.rotation_period }</td>\n                <td>{ planet.surface_water }</td>\n                <td>{ planet.terrain }</td>\n                <td>{ planet.url }</td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table> */}\n    </div>\n  )\n}\n\nexport default App\n","import { useState } from \"react\"\n\nconst useLocalStorage = <T = any>(key: string, initialValue: unknown): [T, Function] => {\n    const [_value, _setValue] = useState<T>(() => {\n        try {\n            const item = window.localStorage.getItem(key)\n            return item ? JSON.parse(item) : initialValue\n        } catch (error) {\n            return initialValue\n        }\n    })\n\n    const setValue = (value: T) => {\n        try {\n            _setValue(value)\n\n            window.localStorage.setItem(\n                key,\n                JSON.stringify(value)\n            )\n        } catch (error) {\n\n        }\n    }\n\n    return [\n        _value,\n        setValue\n    ]\n}\n\nexport {\n    useLocalStorage\n}","import { useEffect, useState } from \"react\"\n\nconst useFetch = <T = any>(url: string, callback?: Function): [T, boolean, string, Function] => {\n    const [data, setData] = useState<T>()\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(true)\n\n    async function fetchData() {\n        setLoading(true)\n        setError('')\n        try {\n            const r = await fetch(url)\n            const data: T = await r.json()\n\n            if (callback){\n                setData(callback(data))\n            } else {\n                setData(data)\n            }\n        } catch (error) {\n            setError('Bad request')\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        fetchData()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [url])\n\n    return [\n        data as T,\n        loading,\n        error,\n        fetchData\n    ]\n}\n\nexport {\n    useFetch\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}